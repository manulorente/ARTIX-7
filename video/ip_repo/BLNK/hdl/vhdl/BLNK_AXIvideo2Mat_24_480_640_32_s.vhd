-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BLNK_AXIvideo2Mat_24_480_640_32_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    InS_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    InS_TVALID : IN STD_LOGIC;
    InS_TREADY : OUT STD_LOGIC;
    InS_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    InS_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    InS_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    InS_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    InS_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    InS_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of BLNK_AXIvideo2Mat_24_480_640_32_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal eol_1_reg_164 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_175 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_3_reg_186 : STD_LOGIC_VECTOR (9 downto 0);
    signal eol_reg_197 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_2_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_222 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_data_V_reg_349 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_73 : BOOLEAN;
    signal tmp_last_V_reg_357 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_87 : BOOLEAN;
    signal i_V_fu_293_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_V_reg_373 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_98 : BOOLEAN;
    signal brmerge_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_106 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_119 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_V_fu_305_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_391 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_396 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_401 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_144 : BOOLEAN;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal axi_last_V_3_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_reg_133 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_167 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal axi_data_V_3_reg_246 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_data_V1_reg_143 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_s_reg_153 : STD_LOGIC_VECTOR (8 downto 0);
    signal eol_1_phi_fu_167_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_phi_fu_178_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_phi_fu_201_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_axi_last_V_2_reg_209pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_p_Val2_s_reg_222pp1_it0 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_s_phi_fu_226_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_2_reg_258 : STD_LOGIC_VECTOR (0 downto 0);
    signal sof_1_fu_90 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_278_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_bdd_293 : BOOLEAN;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal ap_sig_bdd_198 : BOOLEAN;
    signal ap_sig_bdd_130 : BOOLEAN;
    signal ap_sig_bdd_213 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond3_fu_287_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond4_fu_299_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_287_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_fu_299_p2 = ap_const_lv1_0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_287_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond4_fu_299_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_data_V1_reg_143 assign process. --
    axi_data_V1_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_data_V1_reg_143 <= tmp_data_V_reg_349;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_data_V1_reg_143 <= axi_data_V_3_reg_246;
            end if; 
        end if;
    end process;

    -- axi_data_V_1_reg_175 assign process. --
    axi_data_V_1_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                axi_data_V_1_reg_175 <= p_Val2_s_reg_222;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_287_p2 = ap_const_lv1_0))) then 
                axi_data_V_1_reg_175 <= axi_data_V1_reg_143;
            end if; 
        end if;
    end process;

    -- axi_data_V_3_reg_246 assign process. --
    axi_data_V_3_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond4_fu_299_p2 = ap_const_lv1_0)))) then 
                axi_data_V_3_reg_246 <= axi_data_V_1_phi_fu_178_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_reg_258) and not(ap_sig_bdd_149))) then 
                axi_data_V_3_reg_246 <= InS_TDATA;
            end if; 
        end if;
    end process;

    -- axi_last_V1_reg_133 assign process. --
    axi_last_V1_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_last_V1_reg_133 <= tmp_last_V_reg_357;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_last_V1_reg_133 <= axi_last_V_3_reg_234;
            end if; 
        end if;
    end process;

    -- axi_last_V_2_reg_209 assign process. --
    axi_last_V_2_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_130) then
                if (ap_sig_bdd_198) then 
                    axi_last_V_2_reg_209 <= eol_1_phi_fu_167_p4;
                elsif (ap_sig_bdd_105) then 
                    axi_last_V_2_reg_209 <= InS_TLAST;
                elsif ((ap_true = ap_true)) then 
                    axi_last_V_2_reg_209 <= ap_reg_phiprechg_axi_last_V_2_reg_209pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- axi_last_V_3_reg_234 assign process. --
    axi_last_V_3_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond4_fu_299_p2 = ap_const_lv1_0)))) then 
                axi_last_V_3_reg_234 <= eol_1_phi_fu_167_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_reg_258) and not(ap_sig_bdd_149))) then 
                axi_last_V_3_reg_234 <= InS_TLAST;
            end if; 
        end if;
    end process;

    -- eol_1_reg_164 assign process. --
    eol_1_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_1_reg_164 <= axi_last_V_2_reg_209;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_287_p2 = ap_const_lv1_0))) then 
                eol_1_reg_164 <= axi_last_V1_reg_133;
            end if; 
        end if;
    end process;

    -- eol_2_reg_258 assign process. --
    eol_2_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond4_fu_299_p2 = ap_const_lv1_0)))) then 
                eol_2_reg_258 <= eol_phi_fu_201_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_reg_258) and not(ap_sig_bdd_149))) then 
                eol_2_reg_258 <= InS_TLAST;
            end if; 
        end if;
    end process;

    -- eol_reg_197 assign process. --
    eol_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_reg_197 <= axi_last_V_2_reg_209;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_287_p2 = ap_const_lv1_0))) then 
                eol_reg_197 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- p_3_reg_186 assign process. --
    p_3_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_fu_299_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                p_3_reg_186 <= j_V_fu_305_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_287_p2 = ap_const_lv1_0))) then 
                p_3_reg_186 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_222 assign process. --
    p_Val2_s_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_130) then
                if (ap_sig_bdd_198) then 
                    p_Val2_s_reg_222 <= axi_data_V_1_phi_fu_178_p4;
                elsif (ap_sig_bdd_105) then 
                    p_Val2_s_reg_222 <= InS_TDATA;
                elsif ((ap_true = ap_true)) then 
                    p_Val2_s_reg_222 <= ap_reg_phiprechg_p_Val2_s_reg_222pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- p_s_reg_153 assign process. --
    p_s_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                p_s_reg_153 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                p_s_reg_153 <= i_V_reg_373;
            end if; 
        end if;
    end process;

    -- sof_1_fu_90 assign process. --
    sof_1_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_fu_299_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                sof_1_fu_90 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                sof_1_fu_90 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                exitcond4_reg_378 <= exitcond4_fu_299_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_V_reg_373 <= i_V_fu_293_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_fu_299_p2 = ap_const_lv1_0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                tmp_5_reg_396 <= p_Val2_s_phi_fu_226_p4(15 downto 8);
                tmp_6_reg_401 <= p_Val2_s_phi_fu_226_p4(23 downto 16);
                tmp_8_reg_391 <= tmp_8_fu_320_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((InS_TVALID = ap_const_logic_0)))) then
                tmp_data_V_reg_349 <= InS_TDATA;
                tmp_last_V_reg_357 <= InS_TLAST;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, InS_TVALID, exitcond3_fu_287_p2, exitcond4_fu_299_p2, ap_sig_bdd_106, ap_reg_ppiten_pp1_it0, ap_sig_bdd_119, ap_reg_ppiten_pp1_it1, ap_sig_bdd_149, eol_2_reg_258, tmp_user_V_fu_278_p1, ap_sig_bdd_293)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_293)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((InS_TVALID = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_user_V_fu_278_p1))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((InS_TVALID = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_user_V_fu_278_p1)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((exitcond3_fu_287_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond4_fu_299_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond4_fu_299_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (((ap_const_lv1_0 = eol_2_reg_258) and not(ap_sig_bdd_149))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                elsif ((not(ap_sig_bdd_149) and not((ap_const_lv1_0 = eol_2_reg_258)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- InS_TREADY assign process. --
    InS_TREADY_assign_proc : process(InS_TVALID, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_299_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, brmerge_fu_314_p2, ap_sig_bdd_106, ap_reg_ppiten_pp1_it0, ap_sig_bdd_119, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st7_fsm_5, ap_sig_bdd_149, eol_2_reg_258)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((InS_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_reg_258) and not(ap_sig_bdd_149)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_fu_299_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_314_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))))) then 
            InS_TREADY <= ap_const_logic_1;
        else 
            InS_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond3_fu_287_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond3_fu_287_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond3_fu_287_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond3_fu_287_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_axi_last_V_2_reg_209pp1_it0 <= "X";
    ap_reg_phiprechg_p_Val2_s_reg_222pp1_it0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(exitcond4_fu_299_p2, brmerge_fu_314_p2)
    begin
                ap_sig_bdd_105 <= ((exitcond4_fu_299_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_314_p2));
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(InS_TVALID, exitcond4_fu_299_p2, brmerge_fu_314_p2)
    begin
                ap_sig_bdd_106 <= ((InS_TVALID = ap_const_logic_0) and (exitcond4_fu_299_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_314_p2));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, exitcond4_reg_378)
    begin
                ap_sig_bdd_119 <= (((img_data_stream_0_V_full_n = ap_const_logic_0) and (exitcond4_reg_378 = ap_const_lv1_0)) or ((exitcond4_reg_378 = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond4_reg_378 = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_130 assign process. --
    ap_sig_bdd_130_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_106, ap_reg_ppiten_pp1_it0, ap_sig_bdd_119, ap_reg_ppiten_pp1_it1)
    begin
                ap_sig_bdd_130 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))));
    end process;


    -- ap_sig_bdd_144 assign process. --
    ap_sig_bdd_144_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_144 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(InS_TVALID, eol_2_reg_258)
    begin
                ap_sig_bdd_149 <= ((InS_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = eol_2_reg_258));
    end process;


    -- ap_sig_bdd_167 assign process. --
    ap_sig_bdd_167_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_167 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_198 assign process. --
    ap_sig_bdd_198_assign_proc : process(exitcond4_fu_299_p2, brmerge_fu_314_p2)
    begin
                ap_sig_bdd_198 <= ((exitcond4_fu_299_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = brmerge_fu_314_p2)));
    end process;


    -- ap_sig_bdd_213 assign process. --
    ap_sig_bdd_213_assign_proc : process(exitcond4_fu_299_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it0)
    begin
                ap_sig_bdd_213 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_fu_299_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_293 assign process. --
    ap_sig_bdd_293_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_293 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_73 assign process. --
    ap_sig_bdd_73_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_73 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_87 assign process. --
    ap_sig_bdd_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_87 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_98 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_4_assign_proc : process(ap_sig_bdd_98)
    begin
        if (ap_sig_bdd_98) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_73)
    begin
        if (ap_sig_bdd_73) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_87)
    begin
        if (ap_sig_bdd_87) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_144)
    begin
        if (ap_sig_bdd_144) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_6 assign process. --
    ap_sig_cseq_ST_st8_fsm_6_assign_proc : process(ap_sig_bdd_167)
    begin
        if (ap_sig_bdd_167) then 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- axi_data_V_1_phi_fu_178_p4 assign process. --
    axi_data_V_1_phi_fu_178_p4_assign_proc : process(axi_data_V_1_reg_175, p_Val2_s_reg_222, exitcond4_reg_378, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            axi_data_V_1_phi_fu_178_p4 <= p_Val2_s_reg_222;
        else 
            axi_data_V_1_phi_fu_178_p4 <= axi_data_V_1_reg_175;
        end if; 
    end process;

    brmerge_fu_314_p2 <= (sof_1_fu_90 or eol_phi_fu_201_p4);

    -- eol_1_phi_fu_167_p4 assign process. --
    eol_1_phi_fu_167_p4_assign_proc : process(eol_1_reg_164, axi_last_V_2_reg_209, exitcond4_reg_378, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_1_phi_fu_167_p4 <= axi_last_V_2_reg_209;
        else 
            eol_1_phi_fu_167_p4 <= eol_1_reg_164;
        end if; 
    end process;


    -- eol_phi_fu_201_p4 assign process. --
    eol_phi_fu_201_p4_assign_proc : process(eol_reg_197, axi_last_V_2_reg_209, exitcond4_reg_378, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_phi_fu_201_p4 <= axi_last_V_2_reg_209;
        else 
            eol_phi_fu_201_p4 <= eol_reg_197;
        end if; 
    end process;

    exitcond3_fu_287_p2 <= "1" when (p_s_reg_153 = ap_const_lv9_1E0) else "0";
    exitcond4_fu_299_p2 <= "1" when (p_3_reg_186 = ap_const_lv10_280) else "0";
    i_V_fu_293_p2 <= std_logic_vector(unsigned(p_s_reg_153) + unsigned(ap_const_lv9_1));
    img_data_stream_0_V_din <= tmp_8_reg_391;

    -- img_data_stream_0_V_write assign process. --
    img_data_stream_0_V_write_assign_proc : process(exitcond4_reg_378, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_106, ap_reg_ppiten_pp1_it0, ap_sig_bdd_119, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_1_V_din <= tmp_5_reg_396;

    -- img_data_stream_1_V_write assign process. --
    img_data_stream_1_V_write_assign_proc : process(exitcond4_reg_378, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_106, ap_reg_ppiten_pp1_it0, ap_sig_bdd_119, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_2_V_din <= tmp_6_reg_401;

    -- img_data_stream_2_V_write assign process. --
    img_data_stream_2_V_write_assign_proc : process(exitcond4_reg_378, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_106, ap_reg_ppiten_pp1_it0, ap_sig_bdd_119, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond4_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_106 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_305_p2 <= std_logic_vector(unsigned(p_3_reg_186) + unsigned(ap_const_lv10_1));

    -- p_Val2_s_phi_fu_226_p4 assign process. --
    p_Val2_s_phi_fu_226_p4_assign_proc : process(InS_TDATA, brmerge_fu_314_p2, axi_data_V_1_phi_fu_178_p4, ap_reg_phiprechg_p_Val2_s_reg_222pp1_it0, ap_sig_bdd_213)
    begin
        if (ap_sig_bdd_213) then
            if (not((ap_const_lv1_0 = brmerge_fu_314_p2))) then 
                p_Val2_s_phi_fu_226_p4 <= axi_data_V_1_phi_fu_178_p4;
            elsif ((ap_const_lv1_0 = brmerge_fu_314_p2)) then 
                p_Val2_s_phi_fu_226_p4 <= InS_TDATA;
            else 
                p_Val2_s_phi_fu_226_p4 <= ap_reg_phiprechg_p_Val2_s_reg_222pp1_it0;
            end if;
        else 
            p_Val2_s_phi_fu_226_p4 <= ap_reg_phiprechg_p_Val2_s_reg_222pp1_it0;
        end if; 
    end process;

    tmp_8_fu_320_p1 <= p_Val2_s_phi_fu_226_p4(8 - 1 downto 0);
    tmp_user_V_fu_278_p1 <= InS_TUSER;
end behav;
